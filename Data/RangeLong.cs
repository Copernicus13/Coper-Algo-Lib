//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a T4 template.
//
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace CoperAlgoLib.Data
{
    public class RangeLong
    {
        private Tuple<long, long> _Range;

        public static readonly RangeLong Void = new RangeLong(default(long), default(long));

        public long Minimum { get { return _Range.Item1; } }

        public long Maximum { get { return _Range.Item2; } }

        public long Count { get { return Maximum - Minimum + 1; } }

        public RangeLong(long min, long? max = default, long? length = default)
        {
            if (max.HasValue)
                _Range = new Tuple<long, long>(min, max.Value);
            else if (length.HasValue)
                _Range = new Tuple<long, long>(min, min + length.Value - 1);
            else
                throw new ArgumentNullException();
        }

        public bool ContainsValue(long value)
        {
            return Comparer<long>.Default.Compare(Minimum, value) <= 0 &&
                Comparer<long>.Default.Compare(value, Maximum) <= 0;
        }

        public bool IsInsideRange(RangeLong range) =>
            range.ContainsValue(Minimum) && range.ContainsValue(Maximum);

        public bool ContainsRange(RangeLong range) =>
            ContainsValue(range.Minimum) && ContainsValue(range.Maximum);

        public bool IsOverlapping(RangeLong range) =>
            ContainsValue(range.Minimum) || ContainsValue(range.Maximum) ||
            range.ContainsValue(Minimum) || range.ContainsValue(Maximum);

        public RangeLong Union(RangeLong range)
        {
            if (!IsOverlapping(range))
                return Void;
            if (IsInsideRange(range))
                return range;
            if (ContainsRange(range))
                return this;
            return new RangeLong(
                Comparer<long>.Default.Compare(Minimum, range.Minimum) < 0 ?
                    Minimum : range.Minimum,
                Comparer<long>.Default.Compare(Maximum, range.Maximum) > 0 ?
                    Maximum : range.Maximum);
        }

        public RangeLong Intersect(RangeLong range)
        {
            if (!IsOverlapping(range))
                return Void;
            if (IsInsideRange(range))
                return this;
            if (ContainsRange(range))
                return range;
            return new RangeLong(
                Comparer<long>.Default.Compare(Minimum, range.Minimum) < 0 ?
                    range.Minimum : Minimum,
                Comparer<long>.Default.Compare(Maximum, range.Maximum) > 0 ?
                    range.Maximum : Maximum);
        }
    }
}
